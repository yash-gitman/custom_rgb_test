{"entries":[{"timestamp":1736447696073,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[-1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace rgb {\" line1=\"    /**\" line2=\"     * Turn RED LED on/off\" line3=\"     * @param p RED state (0 for off, 1 for on), eg: 1\" line4=\"     */\" line5=\"    //% block=&quot;set RED to %p&quot;\" line6=\"    export function rgb_red(p: number): void {\" line7=\"        pins.digitalWritePin(DigitalPin.P14, p);\" line8=\"    }\" line9=\"\" line10=\"    /**\" line11=\"     * Turn GREEN LED on/off\" line12=\"     * @param p GREEN state (0 for off, 1 for on), eg: 1\" line13=\"     */\" line14=\"    //% block=&quot;set GREEN to %p&quot;\" line15=\"    export function rgb_green(p: number): void {\" line16=\"        pins.digitalWritePin(DigitalPin.P15, p);\" line17=\"    }\" line18=\"\" line19=\"    /**\" line20=\"     * Turn BLUE LED on/off\" line21=\"     * @param p BLUE state (0 for off, 1 for on), eg: 1\" line22=\"     */\" line23=\"    //% block=&quot;set BLUE to %p&quot;\" line24=\"    export function rgb_blue(p: number): void {\" line25=\"        pins.digitalWritePin(DigitalPin.P16, p);\" line26=\"    }\" line27=\"\" line28=\"    /**\" line29=\"     * Set brightness for RED LED\" line30=\"     * @param p RED brightness (0 to 1023), eg: 512\" line31=\"     */\" line32=\"    //% block=&quot;set RED brightness to %p&quot;\" line33=\"    export function rgb_red_brightness(p: number): void {\" line34=\"        pins.analogWritePin(AnalogPin.P14, p);\" line35=\"    }\" line36=\"\" line37=\"    /**\" line38=\"     * Set brightness for GREEN LED\" line39=\"     * @param p GREEN brightness (0 to 1023), eg: 512\" line40=\"     */\" line41=\"    //% block=&quot;set GREEN brightness to %p&quot;\" line42=\"    export function rgb_green_brightness(p: number): void {\" line43=\"        pins.analogWritePin(AnalogPin.P15, p);\" line44=\"    }\" line45=\"\" line46=\"    /**\" line47=\"     * Set brightness for BLUE LED\" line48=\"     * @param p BLUE brightness (0 to 1023), eg: 512\" line49=\"     */\" line50=\"    //% block=&quot;set BLUE brightness to %p&quot;\" line51=\"    export function rgb_blue_brightness(p: number): void {\" line52=\"        pins.analogWritePin(AnalogPin.P16, p);\" line53=\"    }\" line54=\"}\" numlines=\"55\"></mutation></block></statement></block></xml>"]],"start1":0,"start2":0,"length1":2328,"length2":0}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"/**\r\n* Use this file to define custom functions and blocks.\r\n* Read more at https://makecode.microbit.org/blocks/custom\r\n*/\r\n\r\n//% weight=100 color=#FF5733 icon=\"\"\r\nnamespace rgb {\r\n    /**\r\n     * Turn RED LED on/off\r\n     * @param p RED state (0 for off, 1 for on), eg: 1\r\n     */\r\n    //% block=\"set RED to %p\"\r\n    export function rgb_red(p: number): void {\r\n        pins.digitalWritePin(DigitalPin.P14, p);\r\n    }\r\n\r\n    /**\r\n     * Turn GREEN LED on/off\r\n     * @param p GREEN state (0 for off, 1 for on), eg: 1\r\n     */\r\n    //% block=\"set GREEN to %p\"\r\n    export function rgb_green(p: number): void {\r\n        pins.digitalWritePin(DigitalPin.P15, p);\r\n    }\r\n\r\n    /**\r\n     * Turn BLUE LED on/off\r\n     * @param p BLUE state (0 for off, 1 for on), eg: 1\r\n     */\r\n    //% block=\"set BLUE to %p\"\r\n    export function rgb_blue(p: number): void {\r\n        pins.digitalWritePin(DigitalPin.P16, p);\r\n    }\r\n\r\n    /**\r\n     * Set brightness for RED LED\r\n     * @param p RED brightness (0 to 1023), eg: 512\r\n     */\r\n    //% block=\"set RED brightness to %p\"\r\n    export function rgb_red_brightness(p: number): void {\r\n        pins.analogWritePin(AnalogPin.P14, p);\r\n    }\r\n\r\n    /**\r\n     * Set brightness for GREEN LED\r\n     * @param p GREEN brightness (0 to 1023), eg: 512\r\n     */\r\n    //% block=\"set GREEN brightness to %p\"\r\n    export function rgb_green_brightness(p: number): void {\r\n        pins.analogWritePin(AnalogPin.P15, p);\r\n    }\r\n\r\n    /**\r\n     * Set brightness for BLUE LED\r\n     * @param p BLUE brightness (0 to 1023), eg: 512\r\n     */\r\n    //% block=\"set BLUE brightness to %p\"\r\n    export function rgb_blue_brightness(p: number): void {\r\n        pins.analogWritePin(AnalogPin.P16, p);\r\n    }\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":1718}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"custom.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":217,"start2":217,"length1":66,"length2":44}]},{"type":"added","filename":"custom.ts","value":"/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n//% weight=100 color=#FF5733 icon=\"\"\nnamespace rgb {\n\n    // Enum for LED states (on/off)\n    enum LEDState {\n        //% block=\"off\"\n        Off = 0,\n        //% block=\"on\"\n        On = 1\n    }\n\n    /**\n     * Turn RED LED on/off\n     * @param state RED state (on or off), eg: LEDState.On\n     */\n    //% block=\"set RED to %state\"\n    export function rgb_red(state: LEDState): void {\n        pins.digitalWritePin(DigitalPin.P14, state);\n    }\n\n    /**\n     * Turn GREEN LED on/off\n     * @param state GREEN state (on or off), eg: LEDState.On\n     */\n    //% block=\"set GREEN to %state\"\n    export function rgb_green(state: LEDState): void {\n        pins.digitalWritePin(DigitalPin.P15, state);\n    }\n\n    /**\n     * Turn BLUE LED on/off\n     * @param state BLUE state (on or off), eg: LEDState.On\n     */\n    //% block=\"set BLUE to %state\"\n    export function rgb_blue(state: LEDState): void {\n        pins.digitalWritePin(DigitalPin.P16, state);\n    }\n\n    /**\n     * Set brightness for RED LED\n     * @param p RED brightness (0 to 1023), eg: 512\n     */\n    //% block=\"set RED brightness to %p\"\n    export function rgb_red_brightness(p: number): void {\n        pins.analogWritePin(AnalogPin.P14, p);\n    }\n\n    /**\n     * Set brightness for GREEN LED\n     * @param p GREEN brightness (0 to 1023), eg: 512\n     */\n    //% block=\"set GREEN brightness to %p\"\n    export function rgb_green_brightness(p: number): void {\n        pins.analogWritePin(AnalogPin.P15, p);\n    }\n\n    /**\n     * Set brightness for BLUE LED\n     * @param p BLUE brightness (0 to 1023), eg: 512\n     */\n    //% block=\"set BLUE brightness to %p\"\n    export function rgb_blue_brightness(p: number): void {\n        pins.analogWritePin(AnalogPin.P16, p);\n    }\n}"}]},{"timestamp":1736448251923,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace rgb {\" line1=\"    /**\" line2=\"     * Turn RED LED on/off\" line3=\"     * @param p RED state (0 for off, 1 for on), eg: 1\" line4=\"     */\" line5=\"    //% block=&quot;set RED to %p&quot;\" line6=\"    export function rgb_red(p: number): void {\" line7=\"        pins.digitalWritePin(DigitalPin.P14, p);\" line8=\"    }\" line9=\"\" line10=\"    /**\" line11=\"     * Turn GREEN LED on/off\" line12=\"     * @param p GREEN state (0 for off, 1 for on), eg: 1\" line13=\"     */\" line14=\"    //% block=&quot;set GREEN to %p&quot;\" line15=\"    export function rgb_green(p: number): void {\" line16=\"        pins.digitalWritePin(DigitalPin.P15, p);\" line17=\"    }\" line18=\"\" line19=\"    /**\" line20=\"     * Turn BLUE LED on/off\" line21=\"     * @param p BLUE state (0 for off, 1 for on), eg: 1\" line22=\"     */\" line23=\"    //% block=&quot;set BLUE to %p&quot;\" line24=\"    export function rgb_blue(p: number): void {\" line25=\"        pins.digitalWritePin(DigitalPin.P16, p);\" line26=\"    }\" line27=\"\" line28=\"    /**\" line29=\"     * Set brightness for RED LED\" line30=\"     * @param p RED brightness (0 to 1023), eg: 512\" line31=\"     */\" line32=\"    //% block=&quot;set RED brightness to %p&quot;\" line33=\"    export function rgb_red_brightness(p: number): void {\" line34=\"        pins.analogWritePin(AnalogPin.P14, p);\" line35=\"    }\" line36=\"\" line37=\"    /**\" line38=\"     * Set brightness for GREEN LED\" line39=\"     * @param p GREEN brightness (0 to 1023), eg: 512\" line40=\"     */\" line41=\"    //% block=&quot;set GREEN brightness to %p&quot;\" line42=\"    export function rgb_green_brightness(p: number): void {\" line43=\"        pins.analogWritePin(AnalogPin.P15, p);\" line44=\"    }\" line45=\"\" line46=\"    /**\" line47=\"     * Set brightness for BLUE LED\" line48=\"     * @param p BLUE brightness (0 to 1023), eg: 512\" line49=\"     */\" line50=\"    //% block=&quot;set BLUE brightness to %p&quot;\" line51=\"    export function rgb_blue_brightness(p: number): void {\" line52=\"        pins.analogWritePin(AnalogPin.P16, p);\" line53=\"    }\" line54=\"}\" numlines=\"55\"></mutation></block></statement></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":2257}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":246,"start2":246,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1736447696072,"editorVersion":"7.0.57","text":{"main.blocks":"","main.ts":"/**\r\n* Use this file to define custom functions and blocks.\r\n* Read more at https://makecode.microbit.org/blocks/custom\r\n*/\r\n\r\n//% weight=100 color=#FF5733 icon=\"\"\r\nnamespace rgb {\r\n    /**\r\n     * Turn RED LED on/off\r\n     * @param p RED state (0 for off, 1 for on), eg: 1\r\n     */\r\n    //% block=\"set RED to %p\"\r\n    export function rgb_red(p: number): void {\r\n        pins.digitalWritePin(DigitalPin.P14, p);\r\n    }\r\n\r\n    /**\r\n     * Turn GREEN LED on/off\r\n     * @param p GREEN state (0 for off, 1 for on), eg: 1\r\n     */\r\n    //% block=\"set GREEN to %p\"\r\n    export function rgb_green(p: number): void {\r\n        pins.digitalWritePin(DigitalPin.P15, p);\r\n    }\r\n\r\n    /**\r\n     * Turn BLUE LED on/off\r\n     * @param p BLUE state (0 for off, 1 for on), eg: 1\r\n     */\r\n    //% block=\"set BLUE to %p\"\r\n    export function rgb_blue(p: number): void {\r\n        pins.digitalWritePin(DigitalPin.P16, p);\r\n    }\r\n\r\n    /**\r\n     * Set brightness for RED LED\r\n     * @param p RED brightness (0 to 1023), eg: 512\r\n     */\r\n    //% block=\"set RED brightness to %p\"\r\n    export function rgb_red_brightness(p: number): void {\r\n        pins.analogWritePin(AnalogPin.P14, p);\r\n    }\r\n\r\n    /**\r\n     * Set brightness for GREEN LED\r\n     * @param p GREEN brightness (0 to 1023), eg: 512\r\n     */\r\n    //% block=\"set GREEN brightness to %p\"\r\n    export function rgb_green_brightness(p: number): void {\r\n        pins.analogWritePin(AnalogPin.P15, p);\r\n    }\r\n\r\n    /**\r\n     * Set brightness for BLUE LED\r\n     * @param p BLUE brightness (0 to 1023), eg: 512\r\n     */\r\n    //% block=\"set BLUE brightness to %p\"\r\n    export function rgb_blue_brightness(p: number): void {\r\n        pins.analogWritePin(AnalogPin.P16, p);\r\n    }\r\n}","README.md":"","pxt.json":"{\n    \"name\": \"custom\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1736448432007}